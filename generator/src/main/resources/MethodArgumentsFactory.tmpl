/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *          http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
package ${packageName};

import java.util.HashMap;
import java.util.Map;

import org.jboss.netty.buffer.ChannelBuffer;

import ${packageName}.protocol.*;

public class MethodArgumentsFactory {
    private static Map<Integer, Class<? extends MethodArguments>> map = new HashMap<Integer, Class<? extends MethodArguments>>();
    
    private MethodArgumentsFactory() {}
    
    static {
<#list classDefinitions as cd>
    <#list cd.methods as m>
        map.put(0x${cd.code2Digits}${m.code2Digits}, ${cd.name?cap_first}${m.argumentsClassName}.class);
    </#list>
</#list>
    }
    
    public static MethodArguments createFromBuffer(Integer classAndMethod, ChannelBuffer buffer) {
        try {
            Class<? extends MethodArguments> argumentsClass = map.get(classAndMethod);
            MethodArguments methodArguments;
            methodArguments = argumentsClass.newInstance();
            methodArguments.decode(buffer);
            return methodArguments;
        } catch (InstantiationException e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
        } catch (IllegalAccessException e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
        }
        
        throw new RuntimeException();
    }
    
    public static MethodArguments createFromBuffer(Integer classCode, Integer methodCode, ChannelBuffer buffer) {
        Integer classAndMethod = (classCode << 8) | methodCode;
        return createFromBuffer(classAndMethod, buffer);
    }
}