package com.amentra.amqp.client;

import java.util.HashMap;
import java.util.Map;

import org.jboss.netty.buffer.ChannelBuffer;

import com.amentra.amqp.client.protocol.*;

public class MethodArgumentsFactory {
    private static Map<Integer, Class<? extends MethodArguments>> map = new HashMap<Integer, Class<? extends MethodArguments>>();
    
    private MethodArgumentsFactory() {}
    
    static {
<#list classDefinitions as cd>
    <#list cd.methods as m>
        map.put(0x${cd.code2Digits}${m.code2Digits}, ${cd.name?cap_first}${m.argumentsClassName}.class);
    </#list>
</#list>
    }
    
    public static MethodArguments createFromBuffer(Integer classAndMethod, ChannelBuffer buffer) {
        try {
            Class<? extends MethodArguments> argumentsClass = map.get(classAndMethod);
            MethodArguments methodArguments;
            methodArguments = argumentsClass.newInstance();
            methodArguments.decode(buffer);
            return methodArguments;
        } catch (InstantiationException e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
        } catch (IllegalAccessException e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
        }
        
        throw new RuntimeException();
    }
    
    public static MethodArguments createFromBuffer(Integer classCode, Integer methodCode, ChannelBuffer buffer) {
        Integer classAndMethod = (classCode << 8) | methodCode;
        return createFromBuffer(classAndMethod, buffer);
    }
}