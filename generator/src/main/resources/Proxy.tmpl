/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *          http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
package ${packageName};

import org.jboss.netty.channel.Channel;
import org.jboss.netty.channel.ChannelFuture;
import org.jboss.netty.channel.ChannelFutureListener;

import com.redhat.osas.amqp.client.ProtocolMessage;
import com.redhat.osas.amqp.client.MessageType;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;


public class ${className?cap_first}Proxy {
    private static final Logger LOG = LoggerFactory.getLogger(${className?cap_first}Proxy.class);
     
    public static final String className = "${className}";
    public static final byte code = ${classCode};
    
    <#list methods as method>
    public static final short code_${method.underscoredName} = ${method.code};
    </#list>
    
    public ${className?cap_first}Proxy() {
    }
    
    <#list methods as method>
    public ChannelFuture ${method.underscoredName}(${className?cap_first}${method.argumentsClassName} arguments, Channel channel) {
        ProtocolMessage message = new ProtocolMessage(code, code_${method.underscoredName}, arguments, MessageType.${method.messageType});
        
        ChannelFuture future = channel.write(message);
        future.addListener(new ChannelFutureListener() {
            public void operationComplete(ChannelFuture future) throws Exception {
                LOG.debug("${method.name} future");
                LOG.debug("success = {}", future.isSuccess());
                LOG.debug("done = {}", future.isDone());
                LOG.debug("cancelled = {}", future.isCancelled());
                LOG.debug("cause = {}", future.getCause());
            }
        });
        return future;
    }
    </#list>
}