/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *          http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
package ${packageName};

import org.jboss.netty.channel.ChannelFuture;
import ${packageName}.impl.ConnectionImpl;
import ${packageName}.protocol.*;

public abstract class SessionBase {
    protected abstract Future send(ProtocolMessage pm);
    
    <#list classDefinitions as cd><#lt>
        <#list cd.methods as method><#assign hasField=false><#lt>
    public Future ${cd.name}${method.javaName?cap_first}(<#list method.fields as f><#assign hasField=true>${f.javaType} ${f.camelCased}<#if f_has_next>, </#if></#list><#list method.headers as header><#if hasField>, </#if><#assign hasField=true>${header.struct.className} ${header.struct.className?uncap_first}</#list><#if method.hasBodySegment><#if hasField>, </#if>byte[] body</#if>) {
        ${cd.name?cap_first}${method.argumentsClassName} args = new ${cd.name?cap_first}${method.argumentsClassName}();
        <#if cd.name == "execution" && method.javaName == "Sync">
        args.setSync(true);
        </#if>
        <#list method.fields as f>
        args.set${f.camelCased?cap_first}(${f.camelCased});
        </#list>
        <#list method.headers as header>
        args.set${header.struct.className}(${header.struct.className?uncap_first});
        </#list>
        <#if method.hasBodySegment>
        
        if (body != null && body.length > 1) {
            args.setBody(body);
        }
        </#if>
        
        ProtocolMessage pm = new ProtocolMessage(${cd.code}, ${method.code}, args, MessageType.${method.messageType});
        
        return send(pm);
    }

        </#list>
    </#list>
}