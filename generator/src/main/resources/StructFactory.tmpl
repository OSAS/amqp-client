/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *          http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
package ${packageName};

import java.util.Map;
import java.util.HashMap;
import org.jboss.netty.buffer.ChannelBuffer;
import ${packageName}.protocol.*;

public class StructFactory {
    private static Map<Integer, Class<? extends Struct>> structs = new HashMap<Integer, Class<? extends Struct>>();
    
    private StructFactory() {}
    
    static {
<#list classDefinitions as cd>
    <#list cd.structMap?keys as code>
        <#assign struct = cd.structMap[code]>
        <#if struct.code??>
        structs.put(0x${cd.code2Digits}${struct.code2Digits}, ${struct.className}.class);
        </#if><#t>
    </#list>
</#list>
    }
    
    public static Struct createFromBuffer(Integer classAndCode, ChannelBuffer buffer) {
        try {
            Class<? extends Struct> structClass = structs.get(classAndCode);
            Struct struct = structClass.newInstance();
            struct.decode(buffer);
            return struct;
        } catch (InstantiationException e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
        } catch (IllegalAccessException e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
        }
        
        throw new RuntimeException();
    }
    
    public static Struct createFromBuffer(Integer classCode, Integer structCode, ChannelBuffer buffer) {
        Integer classAndCode = (classCode << 8) | structCode;
        return createFromBuffer(classAndCode, buffer);
    }
}